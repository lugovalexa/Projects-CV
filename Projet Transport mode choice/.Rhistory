mutate(freqtcu = case_when(freqtcu >= 0.5 ~ 1,
freqtcu < 0.5 ~ 0),
heuredep = case_when(heuredep >= 0.5 ~ 1,
heuredep < 0.5 ~ 0))
data_summary <- df1 %>% dplyr::select(freqtcu, permis, ABO_TC, age, nb_pers, VP_DISPO, NB_velo, D13, heuredep)
knitr::kable(psych::describe(data_summary, skew = FALSE), digits = c(1,4,2,2,1,1,1,3))
# Correlation matrix (blank cells : not significant)
df = df %>% drop_na()
cor <- cor(df %>% dplyr::select(freqtcu, heuredep, permis, age, ABO_TC, nb_pers, VP_DISPO, NB_velo, D13))
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(df %>% dplyr::select(freqtcu, heuredep, permis, age, ABO_TC, nb_pers, VP_DISPO, NB_velo, D13))
corrplot(cor, method="number", type="upper", col=c("dark red", "dark green"), bg="light grey", tl.col="black", p.mat = p.mat, sig.level = 0.05, insig = "blank",  diag=FALSE)
# Cross table and different tests
crosstable(df, c(ABO_TC, permis, VP_DISPO, heuredep, D13, nb_pers, age, NB_velo), by=freqtcu, test=TRUE) %>%
as_flextable(fontsizes = list(body = 8, subheaders = 8, header = 8),)
# Test ANOVA
fit <- lm(freqtcu ~ ABO_TC+permis+VP_DISPO+heuredep+D13+nb_pers+NB_velo+age, data=df) # y est la variable numérique et A indique les groupes
knitr::kable(anova(fit), digits = 2)
# Model
model_full <- glm(freqtcu ~ permis + nb_pers + age + I(age^2) + VP_DISPO + NB_velo +
ABO_TC + heuredep + D13,
data = df, family = binomial(link ="logit"))
model_final <- glm(freqtcu ~ permis + age + I(age^2) + VP_DISPO + NB_velo +
ABO_TC,
data = df, family = binomial(link ="logit"))
star = stargazer(model_full, model_final,
type = 'latex',
no.space = TRUE,
header = FALSE,
table.layout = 'd-t-s-n',
column.sep.width = "30pt",
omit.stat = c("f", "ser"),
table.placement = "H")
star = sub('^.+\\caption.+$','', star)
r2mcf_full <- 1-logLik(model_full)/logLik(update(model_full,~1))
r2mcf_final <- 1-logLik(model_final)/logLik(update(model_final,~1))
glm_multi_restreint <- stepAIC(model_full, trace=FALSE)
knitr::kable(Anova(glm_multi_restreint))
cat(star, sep='\n')
# Odds ratios
dependent = "freqtcu"
explanatory_full = c("permis", "VP_DISPO", "NB_velo", 'ABO_TC')
res_multi_full <- df %>%
glmmulti(dependent, explanatory_full) %>%
fit2df(estimate_suffix="(multivarié)")
knitr::kable(res_multi_full,row.names=FALSE, align=c("l", "l", "r", "r", "r", "r"))
## arguments de fonction
my_var <- 'age' # Nom de variable
t_m <- model_final # chargement du modèle estimé
step <- 1 # pas d'incrément de la variable (pour obtenir l'axe des x)
#
r_max <- max(t_m$model[,my_var])
r_min <- min(t_m$model[,my_var])
range_f <- seq(r_min,r_max,step)
{
# on crée une observation moyenne sur toutes les autres variables et on fait varier my_var
t_m$data = t_m$data %>% dplyr::select(-c(id_pers, tir, zonetrav))
mean_age <- as.data.frame(t(colMeans(t_m$data))) %>%
cbind(range_f) %>%
mutate(!!my_var := range_f)
# crearion d'une variable age carré
my_var2 <- paste0("I(",my_var,"^2)")
mean_age <- mean_age %>% mutate(!!my_var2:= range_f^2)
mean_age <- mean_age %>% dplyr::select(-range_f)
# on prédit les probabilités et les intervalles de confiance
preddata <- predict(t_m,
newdata = mean_age,
type = "link",
se.fit = T) %>%
as.data.frame() %>%
mutate(
Probabilité = t_m$family$linkinv(fit),
lower = t_m$family$linkinv(fit - 1.96*se.fit),
upper = t_m$family$linkinv(fit + 1.96*se.fit)) %>%
cbind(mean_age) %>%
dplyr::select(all_of(my_var),Probabilité,lower,upper)
# plotting with ggplot:
ggplot(
data = preddata,
aes(
x = get(my_var),
y = Probabilité,
min = lower,
ymax = upper)) +
geom_ribbon(linetype=2, alpha=0.15,fill='#4292C6') +
geom_line(color='#08306B') +
labs(x=paste0("Variable: ",my_var),y='Probabilité',color = NULL) +
scale_x_continuous(
limits=c(r_min, r_max),
expand = c(0,0))  +
theme_classic() + theme(
legend.spacing.y = unit(0.1, "cm"),
legend.justification = c(0, 1),
legend.position = c(0.7, 0.94),
legend.title.align = 0.04,
legend.background = element_rect(
color = NA,
fill = NA)
)
}
## arguments de fonction
vec = c('permis', 'ABO_TC', 'NB_velo', 'VP_DISPO')
t_m <- model_final # chargement du modèle estimé
t_m$data = t_m$data %>% dplyr::select(-c(id_pers, tir, zonetrav))
step <- 1 # pas d'incrément de la variable (pour obtenir l'axe des x)
full_preddata = data.frame()
for (i in 1:length(vec)) {
my_var = vec[i]
r_max <- max(t_m$model[,my_var])
r_min <- min(t_m$model[,my_var])
range_f <- seq(r_min,r_max,step)
# on crée une observation moyenne sur toutes les autres variables et on fait varier my_var
mean_age <- as.data.frame(t(colMeans(t_m$data))) %>%
cbind(range_f) %>%
mutate(!!my_var := range_f)
# crearion d'une variable age carré
my_var2 <- paste0("I(",my_var,"^2)")
mean_age <- mean_age %>% mutate(!!my_var2:= range_f^2)
mean_age <- mean_age %>% dplyr::select(-range_f)
# on prédit les probabilités et les intervalles de confiance
preddata <- predict(t_m,
newdata = mean_age,
type = "link",
se.fit = T) %>%
as.data.frame() %>%
mutate(
Probabilité = t_m$family$linkinv(fit),
lower = t_m$family$linkinv(fit - 1.96*se.fit),
upper = t_m$family$linkinv(fit + 1.96*se.fit)) %>%
cbind(mean_age) %>%
dplyr::select(all_of(my_var), Probabilité, lower, upper) %>%
mutate(indicateur = my_var) %>%
rename(value := !!my_var)
full_preddata = rbind(full_preddata, preddata)
}
# plotting with ggplot:
ggplot(
data = full_preddata,
aes(
x = value,
y = Probabilité,
min = lower,
ymax = upper)) +
facet_wrap(~indicateur, ncol = 2, scales = "free") +
geom_ribbon(linetype=2, alpha=0.15,fill='#4292C6') +
geom_line(color='#08306B') +
labs(x=NULL,y='Probabilité',color = NULL) +
theme_classic() + theme(
legend.spacing.y = unit(0.1, "cm"),
legend.justification = c(0, 1),
legend.position = c(0.7, 0.94),
legend.title.align = 0.04,
legend.background = element_rect(
color = NA,
fill = NA)
)
score=qlogis(glm_multi_restreint$fitted.values)
class=glm_multi_restreint$y
## rocit object
rocit_emp <- rocit(score = score,
class = class,
method = "emp")
kplot1 <- ksplot(rocit_emp)
cutoff = kplot1$`KS Cutoff`
## Plot ROC curve
plot(rocit_emp, col = c(1,"gray50"),
legend = FALSE, YIndex = TRUE)
# Train test split
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train <- df[sample, ]
test <- df[!sample, ]
# Model
model_prediction <- glm(freqtcu ~  nb_pers + VP_DISPO +
ABO_TC + heuredep + D13,
data = train, family = binomial(link ="logit"))
# Predictions
probabilities <- model_prediction %>% predict(test, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "1", "0")
## packages for the project
library(tidyverse)
library(mltools)
library(bib2df)
library(data.table)
library(modelsummary)
library(finalfit)
library(summarytools)
library(ggpubr)
library(car)
library(MASS)
library(crosstable)
library(scales)
library(corrplot)
library(stargazer)
library(ROCit)
library(OptimalCutpoints)
# setting work directory
load('/Users/elizavetagolovanova/Desktop/Econométrie /Projet/allgre.PB_V2.RData')
round(exp(-(1.677 - 0.477)) / (1 + exp(-(1.677 - 0.477)))^2  * (- 0.477), 3)
abs(round(exp(-(1.677 - 0.477)) / (1 + exp(-(1.677 - 0.477)))^2  * (- 0.477), 3))
View(cor)
## packages for the project
library(tidyverse)
library(mltools)
library(bib2df)
library(data.table)
library(modelsummary)
library(finalfit)
library(summarytools)
library(ggpubr)
library(car)
library(MASS)
library(crosstable)
library(scales)
library(corrplot)
library(stargazer)
library(ROCit)
library(OptimalCutpoints)
# setting work directory
load('/Users/elizavetagolovanova/Desktop/Econométrie /Projet/allgre.PB_V2.RData')
## MAPS VISUALISATION
## DATA OF THE GRENOBLE MAP
library(rgdal)
newESRI <- readOGR(dsn = "FOND_MAP", layer = "NewESRI", verbose = FALSE)
## CALCULATION OF % OF REAL USE OF PUBLIC TRANSPORT (ZONE D'HABITAT)
filtered = allgre.PB_V2 %>%
filter(mode %in% c(31,32), freqtcu %in% c(1,2)) %>%
group_by(tir) %>%
count(id_depl) %>% summarise(n_trajets = sum(n))
nonfiltered = allgre.PB_V2 %>%
group_by(tir) %>%
count(id_depl) %>% summarise(n_trajets = sum(n))
percent = merge(filtered, nonfiltered, by = 'tir') %>%
mutate(part_public_transport = n_trajets.x/n_trajets.y) %>%
rename('cod_sectir' = 'tir') %>% dplyr::select(cod_sectir, part_public_transport) %>%
mutate(cod_sectir = as.character(cod_sectir))
## JOIN OF THE MAP AND THE TRIPS
newESRI@data = left_join(newESRI@data , percent)
dff = fortify(newESRI) %>% mutate(id = as.numeric(id) + 1)
newESRI_DF <- merge(dff, as.data.frame(newESRI), by.x = "id", by.y = 0)
newESRI_DF$N_sectir <- gsub('\xe8', 'è', newESRI_DF$N_sectir)
## VISUALISATION
mybreaks <- seq(0, max(newESRI_DF$part_public_transport, na.rm = TRUE), 0.05)
newESRI_DF = newESRI_DF %>% filter(cod_setir_ %in% seq(101, 114))
part1 = ggplot(data = newESRI_DF, aes(x=long, y = lat, group = group)) +
geom_polygon(aes(fill = part_public_transport), colour="darkgray", size=0.3) +
coord_equal() +
ggtitle("Intensité de l'utilisation des transports en commun à Grenoble dans chaque TIR") +
scale_fill_gradient(low = "#2b9c60", high = "#c82c3d", na.value = 'grey',
breaks = mybreaks) +
theme(axis.line=element_blank(),axis.text.x=element_blank(), axis.text.y=element_blank(),
axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),
plot.title = element_text(size = 7),
legend.text=element_text(size=7),
legend.title = element_text(size=7))
# Areas of Grenoble with at least 20% of travels by public transport (by home addres)
newESRI_DF %>% filter(part_public_transport >= 0.2) %>% dplyr::select(N_sectir) %>% unique()
## CALCULATION OF % OF REAL USE OF PUBLIC TRANSPORT (ZONE DE TRAVAIL)
newESRI <- readOGR(dsn = "FOND_MAP", layer = "NewESRI", verbose = FALSE)
filtered <- allgre.PB_V2 %>%
mutate(zonetrav = as.character(round((zonetrav/1000),0))) %>%
filter(mode %in% c(31,32), freqtcu %in% c(1,2)) %>%
group_by(zonetrav) %>%
count(id_depl) %>% summarise(n_trajets = sum(n))
nonfiltered <- allgre.PB_V2 %>%
mutate(zonetrav = as.character(round((zonetrav/1000),0))) %>%
group_by(zonetrav) %>%
count(id_depl) %>% summarise(n_trajets = sum(n))
percent <- merge(filtered, nonfiltered, by = 'zonetrav') %>%
mutate(part_public_transport = n_trajets.x/n_trajets.y) %>%
rename('cod_sectir' = 'zonetrav') %>% dplyr::select(cod_sectir, part_public_transport)
## JOIN OF THE MAP AND THE TRIPS
newESRI@data <- left_join(newESRI@data, percent)
dff <- fortify(newESRI) %>% mutate(id = as.numeric(id) + 1)
newESRI_DF <- merge(dff, as.data.frame(newESRI), by.x = "id", by.y = 0)
newESRI_DF$N_sectir <- gsub('\xe8', 'è', newESRI_DF$N_sectir)
## VISUALISATION
mybreaks <- seq(0, max(newESRI_DF$part_public_transport, na.rm = TRUE), 0.05)
newESRI_DF = newESRI_DF %>% filter(cod_setir_ %in% seq(101, 114))
part2 = ggplot(data = newESRI_DF, aes(x=long, y = lat, group = group)) +
geom_polygon(aes(fill = part_public_transport), colour="darkgray", size=0.3) +
coord_equal() +
ggtitle("Intensité de l'utilisation des transports en commun à Grenoble par zone de travail dans chaque TIR") +
scale_fill_gradient(low = "#2b9c60", high = "#c82c3d", na.value = 'grey', breaks = mybreaks) +
theme(axis.line=element_blank(),axis.text.x=element_blank(), axis.text.y=element_blank(),
axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),
plot.title = element_text(size = 7),
legend.text=element_text(size=7),
legend.title = element_text(size=7))
ggarrange(part1, part2, nrow = 2)
# Areas of Grenoble with at least 20% of travels by public transport (by work addres)
newESRI_DF %>% filter(part_public_transport >= 0.2) %>% dplyr::select(N_sectir) %>% unique()
# Initial filtering and selecting of data
df <- allgre.PB_V2 %>%
filter(OCCU1 %in% c(1, 2, 3),
tir %in% seq(101, 114)) %>%
dplyr::select(id_pers, tir, zonetrav, freqtcu, permis, ABO_TC,
nb_pers, age, VP_DISPO, NB_velo, D13, heuredep)
df$heuredep = df$heuredep-4
df_names <- c(
"freqtcu" = 'Utilisation des
transport en
commun',
"permis" = 'Permis de conduire',
"ABO_TC" = 'Abonement de
transport',
"nb_pers" = 'Taille de ménage',
"age" = "Age",
"VP_DISPO" = "Nombre de voitures",
'NB_velo' = "Nombre de vélos",
'D13' = "Distance du trajet
(km)",
'heuredep' = "Heure de départ
de domicile"
)
part1 = df %>% drop_na() %>%
mutate(
ABO_TC =  case_when(
ABO_TC == 1  ~ 'abo gratuit',
ABO_TC == 2  ~ 'abo payant',
ABO_TC == 3  ~ 'no abo'),
freqtcu = case_when(
freqtcu == 1 ~ 'chaque jour',
freqtcu == 2 ~ '>2 j/sem',
freqtcu == 3 ~ '>2 j/mois',
freqtcu == 4 ~ 'rare',
freqtcu == 5 ~ 'jamais'),
permis = case_when(
permis == 1  ~ 'oui',
permis == 2 ~ 'non',
permis == 3 ~ 'en cours')
) %>%
dplyr::select(id_pers, tir, zonetrav, freqtcu, permis, ABO_TC) %>%
pivot_longer(-c(id_pers, tir, zonetrav), names_to = 'names', values_to = 'values',
values_transform = list(values = as.character)) %>%
mutate(values = factor(values,
ordered = TRUE,
levels = c(
'chaque jour', '>2 j/sem', '>2 j/mois', 'rare', 'jamais',
'oui', 'non', 'en cours',
'abo gratuit', 'abo payant','no abo' ))) %>%
ggplot(aes(x=values)) +
geom_histogram(color="darkblue", fill="darkblue", binwidth=.5, stat = 'count') +
facet_wrap(~names, ncol = 2, scales = "free", labeller = labeller(names = df_names))+
theme(axis.text.x=element_text(angle=45, hjust=1),
panel.background = element_blank(),
plot.caption=element_blank(),
axis.title = element_blank())
part2 = df %>% drop_na() %>%
dplyr::select(id_pers, tir, zonetrav, heuredep, nb_pers, D13, age, VP_DISPO, NB_velo) %>%
pivot_longer(-c(id_pers, tir, zonetrav), names_to = 'names', values_to = 'values') %>%
ggplot(aes(x=values)) +
geom_histogram(color="darkblue", fill="darkblue", binwidth=0.5) +
facet_wrap(~names, ncol = 2, scales = "free", labeller = labeller(names = df_names))+
theme(
panel.background = element_blank(),
plot.caption=element_blank(),
axis.title = element_blank())
ggarrange(part2, part1)
# Cross table and different tests
length = df %>% drop_na() %>% nrow()
percent = round(length / 15077 * 100)
# Preprocessing data
df <- df %>%
mutate(
freqtcu = case_when(freqtcu %in% c(1,2) ~ 1,
freqtcu != c(1,2) ~ 0),
permis = case_when(permis == 1 ~ 1,
permis != 1 ~ 0),
heuredep = case_when(heuredep %in% c(8,9,12,13,14) ~ 1,
heuredep != c(8,9,12,13,14) ~ 0),
ABO_TC = case_when(ABO_TC %in% c(1,2) ~ 1,
ABO_TC == 3 ~ 0)
)
df1 <- df %>%
group_by(id_pers) %>%
summarise(across(everything(), ~mean(.x, na.rm = TRUE))) %>%
drop_na()
df1 <- df %>%
mutate(freqtcu = case_when(freqtcu >= 0.5 ~ 1,
freqtcu < 0.5 ~ 0),
heuredep = case_when(heuredep >= 0.5 ~ 1,
heuredep < 0.5 ~ 0))
data_summary <- df1 %>% dplyr::select(freqtcu, permis, ABO_TC, age, nb_pers, VP_DISPO, NB_velo, D13, heuredep)
knitr::kable(psych::describe(data_summary, skew = FALSE), digits = c(1,4,2,2,1,1,1,3))
# Correlation matrix (blank cells : not significant)
df = df %>% drop_na()
cor <- cor(df %>% dplyr::select(freqtcu, heuredep, permis, age, ABO_TC, nb_pers, VP_DISPO, NB_velo, D13))
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(df %>% dplyr::select(freqtcu, heuredep, permis, age, ABO_TC, nb_pers, VP_DISPO, NB_velo, D13))
corrplot(cor, method="number", type="upper", col=c("dark red", "dark green"), bg="light grey", tl.col="black", p.mat = p.mat, sig.level = 0.05, insig = "blank",  diag=FALSE)
# Cross table and different tests
crosstable(df, c(ABO_TC, permis, VP_DISPO, heuredep, D13, nb_pers, age, NB_velo), by=freqtcu, test=TRUE) %>%
as_flextable(fontsizes = list(body = 8, subheaders = 8, header = 8),)
# Test ANOVA
fit <- lm(freqtcu ~ ABO_TC+permis+VP_DISPO+heuredep+D13+nb_pers+NB_velo+age, data=df) # y est la variable numérique et A indique les groupes
knitr::kable(anova(fit), digits = 2)
# Model
model_full <- glm(freqtcu ~ permis + nb_pers + age + I(age^2) + VP_DISPO + NB_velo +
ABO_TC + heuredep + D13,
data = df, family = binomial(link ="logit"))
model_final <- glm(freqtcu ~ permis + nb_pers + age + I(age^2) + VP_DISPO + NB_velo +
ABO_TC + D13,
data = df, family = binomial(link ="logit"))
star = stargazer(model_full, model_final,
type = 'latex',
no.space = TRUE,
header = FALSE,
table.layout = 'd-t-s-n',
column.sep.width = "30pt",
omit.stat = c("f", "ser"),
table.placement = "H")
star = sub('^.+\\caption.+$','', star)
r2mcf_full <- 1-logLik(model_full)/logLik(update(model_full,~1))
r2mcf_final <- 1-logLik(model_final)/logLik(update(model_final,~1))
glm_multi_restreint <- stepAIC(model_full, trace=FALSE)
knitr::kable(Anova(glm_multi_restreint))
cat(star, sep='\n')
# Odds ratios
dependent = "freqtcu"
explanatory_full = c("permis", "VP_DISPO", "NB_velo", 'ABO_TC', 'D13', 'nb_pers')
res_multi_full <- df %>%
glmmulti(dependent, explanatory_full) %>%
fit2df(estimate_suffix="(multivarié)")
knitr::kable(res_multi_full,row.names=FALSE, align=c("l", "l", "r", "r", "r", "r"))
## arguments de fonction
my_var <- 'age' # Nom de variable
t_m <- model_final # chargement du modèle estimé
step <- 1 # pas d'incrément de la variable (pour obtenir l'axe des x)
#
r_max <- max(t_m$model[,my_var])
r_min <- min(t_m$model[,my_var])
range_f <- seq(r_min,r_max,step)
{
# on crée une observation moyenne sur toutes les autres variables et on fait varier my_var
t_m$data = t_m$data %>% dplyr::select(-c(id_pers, tir, zonetrav))
mean_age <- as.data.frame(t(colMeans(t_m$data))) %>%
cbind(range_f) %>%
mutate(!!my_var := range_f)
# crearion d'une variable age carré
my_var2 <- paste0("I(",my_var,"^2)")
mean_age <- mean_age %>% mutate(!!my_var2:= range_f^2)
mean_age <- mean_age %>% dplyr::select(-range_f)
# on prédit les probabilités et les intervalles de confiance
preddata <- predict(t_m,
newdata = mean_age,
type = "link",
se.fit = T) %>%
as.data.frame() %>%
mutate(
Probabilité = t_m$family$linkinv(fit),
lower = t_m$family$linkinv(fit - 1.96*se.fit),
upper = t_m$family$linkinv(fit + 1.96*se.fit)) %>%
cbind(mean_age) %>%
dplyr::select(all_of(my_var),Probabilité,lower,upper)
# plotting with ggplot:
ggplot(
data = preddata,
aes(
x = get(my_var),
y = Probabilité,
min = lower,
ymax = upper)) +
geom_ribbon(linetype=2, alpha=0.15,fill='#4292C6') +
geom_line(color='#08306B') +
labs(x=paste0("Variable: ",my_var),y='Probabilité',color = NULL) +
scale_x_continuous(
limits=c(r_min, r_max),
expand = c(0,0))  +
theme_classic() + theme(
legend.spacing.y = unit(0.1, "cm"),
legend.justification = c(0, 1),
legend.position = c(0.7, 0.94),
legend.title.align = 0.04,
legend.background = element_rect(
color = NA,
fill = NA)
)
}
View(df)
allgre.PB_V2 %>%
filter(OCCU1 %in% c(1, 2, 3),
tir %in% seq(101, 114))
