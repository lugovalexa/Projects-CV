size = 2, hjust = 0.5, vjust = 0.5)
ggplotly(p, tooltip = c("text")) %>%
layout(xaxis = list(title = variables[1]),
yaxis = list(title = variables[2]),
title = paste("Synergy (green), antagonism (red) and zero effects (white) between",
variables[1], "and", variables[2]), font = list(size = 10))
grid$synergy
p <- ggplot(grid, aes(campaign1, campaign2, fill = synergy) +
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
p <- ggplot(grid, aes(campaign1, campaign2, fill = synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0)))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green", midpoint = 0) +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
ggplotly(p, tooltip = c("text")) %>%
layout(xaxis = list(title = variables[1]),
yaxis = list(title = variables[2]),
title = paste("Synergy (green), antagonism (red) and zero effects (white) between",
variables[1], "and", variables[2]), font = list(size = 10))
p <- ggplot(grid, aes(campaign1, campaign2, fill = synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0)))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green") +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
ggplotly(p, tooltip = c("text")) %>%
layout(xaxis = list(title = variables[1]),
yaxis = list(title = variables[2]),
title = paste("Synergy (green), antagonism (red) and zero effects (white) between",
variables[1], "and", variables[2]), font = list(size = 10))
p <- ggplot(aes(grid[[campaign1]], grid[[campaign2]], fill = grid$synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0)))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green", midpoint = 0) +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
p <- ggplot(grid[[campaign1]], grid[[campaign2]], fill = grid$synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green", midpoint = 0) +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
p <- ggplot(grid, aes(campaign1, campaign2, weight = synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0)))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green", midpoint = 0) +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
ggplotly(p, tooltip = c("text")) %>%
layout(xaxis = list(title = variables[1]),
yaxis = list(title = variables[2]),
title = paste("Synergy (green), antagonism (red) and zero effects (white) between",
variables[1], "and", variables[2]), font = list(size = 10))
ggplot(grid, aes(campaign1, campaign2, weight = synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0)))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green", midpoint = 0) +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
ggplot(grid, aes(campaign1, campaign2, fill = synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0)))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green", midpoint = 0) +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
ggplot(grid, aes(grid[[campaign1]], grid[[campaign2]], fill = grid$synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0)))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green", midpoint = 0) +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
p<-ggplot(grid, aes(grid[[campaign1]], grid[[campaign2]], fill = grid$synergy,
text = paste0(variables[1], ":", round(grid[[campaign1]], 0), ", ",
variables[2], ":", round(grid[[campaign2]], 0)))) +
geom_tile() +
scale_fill_gradient2(low = "salmon", mid = "white", high = "light green", midpoint = 0) +
theme_minimal() +
geom_text(aes(label = ifelse(grid$synergy == 1, "+", ifelse(grid$synergy == -1, "-", ""))),
size = 2, hjust = 0.5, vjust = 0.5)
ggplotly(p, tooltip = c("text")) %>%
layout(xaxis = list(title = variables[1]),
yaxis = list(title = variables[2]),
title = paste("Synergy (green), antagonism (red) and zero effects (white) between", variables[1], "and", variables[2]), font = list(size = 10))
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
source("compare_models.R")
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
#c("radio_grp", "television_grp")) #example 3
#c("tv_ad_budget", "radio_ad_budget")) #example 4
c("media1","media2")) #example 5
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
source("compare_models.R")
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
#variables <- c('annee', 'semaine', 'chiffre_d_affaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
#variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Replace "sales" with the name of your target variable
colnames(DataFrame)[colnames(DataFrame) == 'sales'] <- 'TimeSeries' #example 5
# Make formatting of you date column
colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date' # replace "date" with the name of your date column
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format argument according to your data
# If needed, transform some variables, such as indicators of promotion, into dummies
#DataFrame$variable_dummy <- ifelse(DataFrame$variable > 0, 1, 0)
# Make any other transformation of variables you may need
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison #example 3
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(
DataFrame,
drop_seas = TRUE, related_var_season = 'seasonspring',
LAG = 1
#  adStock = TRUE,
#  variables_ads = c("campaign1","campaign2","campaign3")
)
DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
best_model_dataset = DataFrame_base
## If there is an error, check if all your variables have non zero values
results = best_model_results(best_model_dataset, window_size = 50)
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
#c("radio_grp", "television_grp")) #example 3
#c("tv_ad_budget", "radio_ad_budget")) #example 4
c("media1","media2")) #example 5
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
#variables <- c('annee', 'semaine', 'chiffre_d_affaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
#variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Replace "sales" with the name of your target variable
colnames(DataFrame)[colnames(DataFrame) == 'sales'] <- 'TimeSeries' #example 5
# Make formatting of you date column
colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date' # replace "date" with the name of your date column
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format argument according to your data
# If needed, transform some variables, such as indicators of promotion, into dummies
#DataFrame$variable_dummy <- ifelse(DataFrame$variable > 0, 1, 0)
# Make any other transformation of variables you may need
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison #example 3
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(
DataFrame,
drop_seas = TRUE, related_var_season = 'seasonspring',
LAG = 1
#  adStock = TRUE,
#  variables_ads = c("campaign1","campaign2","campaign3")
)
DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
best_model_dataset = DataFrame_base
## If there is an error, check if all your variables have non zero values
results = best_model_results(best_model_dataset, window_size = 50)
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
#c("radio_grp", "television_grp")) #example 3
c("tv_ad_budget", "radio_ad_budget")) #example 4
#c("media1","media2")) #example 5
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
source("compare_models.R")
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
#c("radio_grp", "television_grp")) #example 3
c("tv_ad_budget", "radio_ad_budget")) #example 4
#c("media1","media2")) #example 5
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
variables <- c('annee', 'semaine', 'chiffre_d_affaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
#variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
#variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
variables <- c('annee', 'semaine', 'chiffre_daffaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
#variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
#variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Replace "sales" with the name of your target variable
colnames(DataFrame)[colnames(DataFrame) == 'chiffre_d_affaires_ht_k'] <- 'TimeSeries' #example 5
# Make formatting of you date column
colnames(DataFrame)[colnames(DataFrame) == 'semaine'] <- 'Date' # replace "date" with the name of your date column
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format argument according to your data
# If needed, transform some variables, such as indicators of promotion, into dummies
#DataFrame$variable_dummy <- ifelse(DataFrame$variable > 0, 1, 0)
# Make any other transformation of variables you may need
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison #example 3
DataFrame_base_dat = main(DataFrame)
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
variables <- c('annee', 'semaine', 'chiffre_daffaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
#variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
#variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Replace "sales" with the name of your target variable
colnames(DataFrame)[colnames(DataFrame) == 'chiffre_daffaires_ht_k'] <- 'TimeSeries' #example 5
# Make formatting of you date column
colnames(DataFrame)[colnames(DataFrame) == 'semaine'] <- 'Date' # replace "date" with the name of your date column
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format argument according to your data
# If needed, transform some variables, such as indicators of promotion, into dummies
#DataFrame$variable_dummy <- ifelse(DataFrame$variable > 0, 1, 0)
# Make any other transformation of variables you may need
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison #example 3
DataFrame_base_dat = main(DataFrame)
DataFrame_base_dat = main(DataFrame)
DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
variables <- c('annee', 'semaine', 'chiffre_daffaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
#variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
#variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Replace "sales" with the name of your target variable
colnames(DataFrame)[colnames(DataFrame) == 'chiffre_daffaires_ht_k'] <- 'TimeSeries' #example 5
# Make formatting of you date column
colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date' # replace "date" with the name of your date column
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format argument according to your data
DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
variables <- c('date','annee', 'semaine', 'chiffre_daffaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
#variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
#variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Replace "sales" with the name of your target variable
colnames(DataFrame)[colnames(DataFrame) == 'chiffre_daffaires_ht_k'] <- 'TimeSeries' #example 5
# Make formatting of you date column
colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date' # replace "date" with the name of your date column
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format argument according to your data
# If needed, transform some variables, such as indicators of promotion, into dummies
#DataFrame$variable_dummy <- ifelse(DataFrame$variable > 0, 1, 0)
# Make any other transformation of variables you may need
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison #example 3
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(
DataFrame,
drop_seas = TRUE, related_var_season = 'seasonspring',
LAG = 1
#  adStock = TRUE,
#  variables_ads = c("campaign1","campaign2","campaign3")
)
DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
mars_choice(list(DataFrame_base, DataFrame_feature), window_size = 50)
best_model_dataset = DataFrame_base
## If there is an error, check if all your variables have non zero values
results = best_model_results(best_model_dataset, window_size = 50)
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
c("radio_grp", "television_grp")) #example 3
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
c('impressions_vidtr', 'impressions_sem')) #example 2
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
c("affichage_indice_de_pression", "catalogue_theme_1_indice_de_pression")) #example 3
#c("tv_ad_budget", "radio_ad_budget")) #example 4
#c("media1","media2")) #example 5
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
#variables <- c('date','annee', 'semaine', 'chiffre_daffaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
#variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Replace "sales" with the name of your target variable
colnames(DataFrame)[colnames(DataFrame) == 'sales'] <- 'TimeSeries' #example 5
# Make formatting of you date column
colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date' # replace "date" with the name of your date column
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format argument according to your data
# If needed, transform some variables, such as indicators of promotion, into dummies
#DataFrame$variable_dummy <- ifelse(DataFrame$variable > 0, 1, 0)
# Make any other transformation of variables you may need
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison #example 3
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(
DataFrame,
drop_seas = TRUE, related_var_season = 'seasonspring',
LAG = 1
#  adStock = TRUE,
#  variables_ads = c("campaign1","campaign2","campaign3")
)
DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
best_model_dataset = DataFrame_base
## If there is an error, check if all your variables have non zero values
results = best_model_results(best_model_dataset, window_size = 50)
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
source("compare_models.R")
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
source("compare_models.R")
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
#c("affichage_indice_de_pression", "catalogue_theme_1_indice_de_pression")) #example 3
#c("tv_ad_budget", "radio_ad_budget")) #example 4
c("media1","media2")) #example 5
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
source("compare_models.R")
best_model_visualisation(best_model_dataset, results, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
#c("affichage_indice_de_pression", "catalogue_theme_1_indice_de_pression")) #example 3
#c("tv_ad_budget", "radio_ad_budget")) #example 4
c("media1","media2")) #example 5
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
source("compare_models.R")
best_model_visualisation(best_model_dataset, results, synergy_threshold = 0.01, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
#c("affichage_indice_de_pression", "catalogue_theme_1_indice_de_pression")) #example 3
#c("tv_ad_budget", "radio_ad_budget")) #example 4
c("media1","media2")) #example 5
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
source("compare_models.R")
# Please, add your dataset here
#DataFrame <- read_excel('datasets/data_example_1.xlsx') %>% clean_names()
#DataFrame <- read_csv('datasets/data_example_2.csv') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_3.xlsx') %>% clean_names()
#DataFrame <- read_excel('datasets/data_example_4.xlsx') %>% clean_names()
DataFrame <- read_excel('datasets/data_example_5.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix') #example 1
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on', 'impressions_em','impressions_sms','impressions_aff','impressions_sem') #example2
#variables <- c('date','annee', 'semaine', 'chiffre_daffaires_ht_k', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression','catalogue_theme_1_indice_de_pression') #example3
#variables <- c('date', 'sales', 'tv_ad_budget', 'radio_ad_budget', 'newspaper_ad_budget') #example4
variables <- c('date','sales','media1', 'media2', 'media3') #example5
DataFrame <- DataFrame %>% select(all_of(variables))
# Replace "sales" with the name of your target variable
colnames(DataFrame)[colnames(DataFrame) == 'sales'] <- 'TimeSeries' #example 5
# Make formatting of you date column
colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date' # replace "date" with the name of your date column
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format argument according to your data
# If needed, transform some variables, such as indicators of promotion, into dummies
#DataFrame$variable_dummy <- ifelse(DataFrame$variable > 0, 1, 0)
# Make any other transformation of variables you may need
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison #example 3
ggplot(DataFrame, aes(x = Date, y = TimeSeries)) +
geom_line(color = "blue") +
labs(x = "Date", y = "Value", title = "Time Series Data") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 9),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
guides(color = 'None')
# Stationarity
## Augmented Dickey–Fuller (ADF) t-statistic test for unit root
if (adf.test(DataFrame$TimeSeries)$p.value > 0.05){
## Pettitt Test to detect a structural break
pettittTest <- trend::pettitt.test(DataFrame$TimeSeries)
if (pettittTest$p.value < 0.05) {
# Add abline to the previous plot to show point of break
ggplot(DataFrame, aes(x = Date, y = TimeSeries)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "red") +
labs(x = "Date", y = "Value", title = "Time Series Data and Trend with Structural Break Point") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 9),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
guides(color = "None") +
geom_vline(mapping = aes(xintercept = as.numeric(Date[pettittTest$estimate])),
linetype = 2,
colour = "red",
linewidth = 1)
}
}
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(
DataFrame,
drop_seas = TRUE, related_var_season = 'seasonspring',
LAG = 1
#  adStock = TRUE,
#  variables_ads = c("campaign1","campaign2","campaign3")
)
DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
mars_choice(list(DataFrame_base, DataFrame_feature), window_size = 50)
best_model_dataset = DataFrame_base
## If there is an error, check if all your variables have non zero values
results = best_model_results(best_model_dataset, window_size = 50)
best_model_visualisation(best_model_dataset, results, synergy_threshold = 0.01, variables =
#c('grp_presse', 'pression_cine')) #example 1
#c('impressions_vidtr', 'impressions_sem')) #example 2
#c("affichage_indice_de_pression", "catalogue_theme_1_indice_de_pression")) #example 3
#c("tv_ad_budget", "radio_ad_budget")) #example 4
c("media1","media2")) #example 5
# keep tight, this function contains training of several machine learning models so it can take quite some time to execute
compare_models(best_model_dataset)
