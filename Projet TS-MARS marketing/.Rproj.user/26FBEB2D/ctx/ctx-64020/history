labs(x = "Date", y = "Value", title = "Time Series Data and Trend with Structural Break Point") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 9),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
guides(color = "None") +
geom_vline(mapping = aes(xintercept = as.numeric(Date[pettittTest$estimate])),
linetype = 2,
colour = "red",
linewidth = 1)
}
}
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(DataFrame, drop_seas = TRUE, related_var_season = 'seasonspring',
adStock = TRUE, LAG = 2,
variables_ads =
## FIRST DATASET TEST
c('grp_presse', 'pression_cine'))
## SECOND DATASET TEST
#c('impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on','impressions_em','impressions_sms','impressions_aff','impressions_sem')
## THIRD DATASET TEST
#c("catalogue_theme_2_indice_de_pression",
#  "catalogue_theme_3_indice_de_pression",
#  "catalogue_theme_4_indice_de_pression",
#  "radio_grp", "television_grp"
)
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(DataFrame, drop_seas = TRUE, related_var_season = 'seasonspring',
adStock = TRUE, LAG = 2,
variables_ads =
## FIRST DATASET TEST
c('grp_presse', 'pression_cine'))
## SECOND DATASET TEST
#c('impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on','impressions_em','impressions_sms','impressions_aff','impressions_sem')
## THIRD DATASET TEST
#c("catalogue_theme_2_indice_de_pression",
#  "catalogue_theme_3_indice_de_pression",
#  "catalogue_theme_4_indice_de_pression",
#  "radio_grp", "television_grp"
#  )
)
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(DataFrame, drop_seas = TRUE, related_var_season = 'seasonspring',
adStock = TRUE, LAG = 2,
variables_ads =
## FIRST DATASET TEST
c('grp_presse', 'pression_cine'))
## SECOND DATASET TEST
#c('impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on','impressions_em','impressions_sms','impressions_aff','impressions_sem')
## THIRD DATASET TEST
#c("catalogue_theme_2_indice_de_pression",
#  "catalogue_theme_3_indice_de_pression",
#  "catalogue_theme_4_indice_de_pression",
#  "radio_grp", "television_grp"
#  )
# )
DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
mars_choice(list(DataFrame_base, DataFrame_feature), window_size = 50)
DataFrame_feature = DataFrame_feature %>% select(-low_seasons)
best_model_dataset = DataFrame_feature
## If there is an error, check if all your variables have non zero values
results = best_model_results(best_model_dataset, window_size = 50)
best_model_visualisation(best_model_dataset, results, variables =
c('grp_presse', 'pression_cine')
#c('impressions_vidtr', 'impressions_sem'),
#c("radio_grp", "television_grp"))
best_model_visualisation(best_model_dataset, results, variables =
c('grp_presse', 'pression_cine'))
#c('impressions_vidtr', 'impressions_sem'),
#c("radio_grp", "television_grp"))
# Mars
# create a tuning grid
hyper_grid <- expand.grid(
degree = 2,
nprune = seq(2, 100, length.out = 10) %>% floor()
)
# cross validated model
set.seed(123)
tuned_mars <- train(
x = subset(DataFrame_base, select = -TimeSeries),
y = DataFrame_base$TimeSeries,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
tuneGrid = hyper_grid
)
# multiple regression
set.seed(123)
model1 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "lm",
metric = "RMSE",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
preProcess = c("center", "scale")
)
# principal component regression
set.seed(123)
model2 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "pcr",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 20
)
# partial least squares regression
set.seed(123)
model3 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "pls",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 20
)
# regularized regression - elastic net
set.seed(123)
model4 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "glmnet",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 10
)
# random forest
set.seed(123)
model5 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "rf",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 10
)
# gradient boosting
set.seed(123)
model6 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "gbm",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 10
)
# extract out of sample performance measures
summary(resamples(list(
Multiple_regression = model1,
PCR = model2,
PLS = model3,
Elastic_net = model4,
Random_forest = model5,
Gradient_boost = model6,
MARS = tuned_mars
)))$statistics$RMSE %>%
kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
DataFrame_base_dat = main(DataFrame, LAG = 1)
DataFrame_feature_dat = main(DataFrame, drop_seas = TRUE, related_var_season = 'seasonspring',
adStock = TRUE, LAG = 2,
variables_ads =
## FIRST DATASET TEST
c('grp_presse', 'pression_cine'))
## SECOND DATASET TEST
#c('impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on','impressions_em','impressions_sms','impressions_aff','impressions_sem')
## THIRD DATASET TEST
#c("catalogue_theme_2_indice_de_pression",
#  "catalogue_theme_3_indice_de_pression",
#  "catalogue_theme_4_indice_de_pression",
#  "radio_grp", "television_grp"
#  )
# )
DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
mars_choice(list(DataFrame_base, DataFrame_feature), window_size = 50)
#DataFrame_feature = DataFrame_feature %>% select(-low_seasons)
best_model_dataset = DataFrame_base
## If there is an error, check if all your variables have non zero values
results = best_model_results(best_model_dataset, window_size = 50)
# Mars
# create a tuning grid
hyper_grid <- expand.grid(
degree = 2,
nprune = seq(2, 100, length.out = 10) %>% floor()
)
# cross validated model
set.seed(123)
tuned_mars <- train(
x = subset(DataFrame_base, select = -TimeSeries),
y = DataFrame_base$TimeSeries,
method = "earth",
metric = "RMSE",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
tuneGrid = hyper_grid
)
# multiple regression
set.seed(123)
model1 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "lm",
metric = "RMSE",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
preProcess = c("center", "scale")
)
# principal component regression
set.seed(123)
model2 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "pcr",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 20
)
# partial least squares regression
set.seed(123)
model3 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "pls",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 20
)
# regularized regression - elastic net
set.seed(123)
model4 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "glmnet",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 10
)
# random forest
set.seed(123)
model5 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "rf",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 10
)
# gradient boosting
set.seed(123)
model6 <- train(
TimeSeries ~ .,
data = DataFrame_base,
method = "gbm",
trControl = trainControl(method = "timeslice",
initialWindow = 50,
horizon = 1,
fixedWindow = TRUE),
metric = "RMSE",
preProcess = c("center", "scale"),
tuneLength = 10
)
# extract out of sample performance measures
summary(resamples(list(
Multiple_regression = model1,
PCR = model2,
PLS = model3,
Elastic_net = model4,
Random_forest = model5,
Gradient_boost = model6,
MARS = tuned_mars
)))$statistics$RMSE %>%
kableExtra::kable() %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
#### FIRST DATASET TEST
# Please, add your dataset here.
#DataFrame <- read_excel('data_marketing.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix')
#DataFrame <- DataFrame %>% select(all_of(variables))
## Put here your target variable
#colnames(DataFrame)[colnames(DataFrame) == 'ventes_boisson_a_client'] <- 'TimeSeries'
## Instead of 'x1' put your date variable
#colnames(DataFrame)[colnames(DataFrame) == 'x1'] <- 'Date'
# If needed, transform some variables in dummy
#DataFrame$promotion_parfum_1_gratuit_dummy <- ifelse(DataFrame$promotion_parfum_1_gratuit > 0, 1, 0)
#DataFrame$promotion_parfum_2_prix_dummy <- ifelse(DataFrame$promotion_parfum_2_prix > 0, 1, 0)
#DataFrame$promotion_parfum_3_prix_dummy <- ifelse(DataFrame$promotion_parfum_3_prix > 0, 1, 0)
#### SECOND DATASET TEST
DataFrame <- read_csv('data_sales.csv') %>% clean_names()
# Select the variables to explain the sales
variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on',
'impressions_em','impressions_sms','impressions_aff','impressions_sem')
DataFrame <- DataFrame %>% select(all_of(variables))
## Instead of 'x1' put your date variable
colnames(DataFrame)[colnames(DataFrame) == 'week_start'] <- 'Date'
DataFrame$Date <- as.Date(DataFrame$Date, format = "%d.%m.%Y") # set format agrument according to your data
## Put here your series that you want to test on stationarity and check seasonal component
colnames(DataFrame)[colnames(DataFrame) == 'sales'] <- 'TimeSeries'
#### THIRD DATASET TEST
# Please, add your dataset here.
#DataFrame <- read_excel('projet_data.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison
#variables <- c('annee', 'semaine', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression',
#               'catalogue_theme_1_indice_de_pression')
#DataFrame <- DataFrame %>% select(-c(variables, contains('sessions'), contains('concurrent')))
## Instead of 'x1' put your date variable
#colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date'
#DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format agrument according to your data
## Put here your series that you want to test on stationarity and check seasonal component
#colnames(DataFrame)[colnames(DataFrame) == 'chiffre_daffaires_ht_k'] <- 'TimeSeries'
ggplot(DataFrame, aes(x = Date, y = TimeSeries)) +
geom_line(color = "blue") +
labs(x = "Date", y = "Value", title = "Time Series Data") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 9),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
guides(color = 'None')
# Stationarity
## Augmented Dickey–Fuller (ADF) t-statistic test for unit root
if (adf.test(DataFrame$TimeSeries)$p.value > 0.05){
## Pettitt Test to detect a structural break
pettittTest <- trend::pettitt.test(DataFrame$TimeSeries)
if (pettittTest$p.value < 0.05) {
# Add abline to the previous plot to show point of break
ggplot(DataFrame, aes(x = Date, y = TimeSeries)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "red") +
labs(x = "Date", y = "Value", title = "Time Series Data and Trend with Structural Break Point") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 9),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
guides(color = "None") +
geom_vline(mapping = aes(xintercept = as.numeric(Date[pettittTest$estimate])),
linetype = 2,
colour = "red",
linewidth = 1)
}
}
DataFrame_base_dat = main(DataFrame, LAG = 1)
DataFrame_feature_dat = main(DataFrame, drop_seas = TRUE, related_var_season = 'seasonspring',
adStock = TRUE, LAG = 1,
variables_ads =
## FIRST DATASET TEST
#c('grp_presse', 'pression_cine'))
## SECOND DATASET TEST
c('impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on','impressions_em','impressions_sms','impressions_aff','impressions_sem')
## THIRD DATASET TEST
#c("catalogue_theme_2_indice_de_pression",
#  "catalogue_theme_3_indice_de_pression",
#  "catalogue_theme_4_indice_de_pression",
#  "radio_grp", "television_grp"
#  )
)
DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
mars_choice(list(DataFrame_base, DataFrame_feature), window_size = 50)
mars_choice(list(DataFrame_base, DataFrame_feature), window_size = 50)
knitr::opts_chunk$set(echo = TRUE)
source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
#### FIRST DATASET TEST
# Please, add your dataset here.
#DataFrame <- read_excel('data_marketing.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix')
#DataFrame <- DataFrame %>% select(all_of(variables))
## Put here your target variable
#colnames(DataFrame)[colnames(DataFrame) == 'ventes_boisson_a_client'] <- 'TimeSeries'
## Instead of 'x1' put your date variable
#colnames(DataFrame)[colnames(DataFrame) == 'x1'] <- 'Date'
# If needed, transform some variables in dummy
#DataFrame$promotion_parfum_1_gratuit_dummy <- ifelse(DataFrame$promotion_parfum_1_gratuit > 0, 1, 0)
#DataFrame$promotion_parfum_2_prix_dummy <- ifelse(DataFrame$promotion_parfum_2_prix > 0, 1, 0)
#DataFrame$promotion_parfum_3_prix_dummy <- ifelse(DataFrame$promotion_parfum_3_prix > 0, 1, 0)
#### SECOND DATASET TEST
DataFrame <- read_csv('data_sales.csv') %>% clean_names()
# Select the variables to explain the sales
variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on',
'impressions_em','impressions_sms','impressions_aff','impressions_sem')
DataFrame <- DataFrame %>% select(all_of(variables))
## Instead of 'x1' put your date variable
colnames(DataFrame)[colnames(DataFrame) == 'week_start'] <- 'Date'
DataFrame$Date <- as.Date(DataFrame$Date, format = "%d.%m.%Y") # set format agrument according to your data
## Put here your series that you want to test on stationarity and check seasonal component
colnames(DataFrame)[colnames(DataFrame) == 'sales'] <- 'TimeSeries'
#### THIRD DATASET TEST
# Please, add your dataset here.
#DataFrame <- read_excel('projet_data.xlsx') %>% clean_names()
# Select the variables to explain your target variable
#DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison
#variables <- c('annee', 'semaine', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression',
#               'catalogue_theme_1_indice_de_pression')
#DataFrame <- DataFrame %>% select(-c(variables, contains('sessions'), contains('concurrent')))
## Instead of 'x1' put your date variable
#colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date'
#DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format agrument according to your data
## Put here your series that you want to test on stationarity and check seasonal component
#colnames(DataFrame)[colnames(DataFrame) == 'chiffre_daffaires_ht_k'] <- 'TimeSeries'
ggplot(DataFrame, aes(x = Date, y = TimeSeries)) +
geom_line(color = "blue") +
labs(x = "Date", y = "Value", title = "Time Series Data") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 9),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
guides(color = 'None')
# Stationarity
## Augmented Dickey–Fuller (ADF) t-statistic test for unit root
if (adf.test(DataFrame$TimeSeries)$p.value > 0.05){
## Pettitt Test to detect a structural break
pettittTest <- trend::pettitt.test(DataFrame$TimeSeries)
if (pettittTest$p.value < 0.05) {
# Add abline to the previous plot to show point of break
ggplot(DataFrame, aes(x = Date, y = TimeSeries)) +
geom_line(color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "red") +
labs(x = "Date", y = "Value", title = "Time Series Data and Trend with Structural Break Point") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 9),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
guides(color = "None") +
geom_vline(mapping = aes(xintercept = as.numeric(Date[pettittTest$estimate])),
linetype = 2,
colour = "red",
linewidth = 1)
}
}
DataFrame_base_dat = main(DataFrame, LAG = 1)
DataFrame_feature_dat = main(DataFrame, drop_seas = TRUE, related_var_season = 'seasonspring',
adStock = TRUE, LAG = 1,
variables_ads =
## FIRST DATASET TEST
#c('grp_presse', 'pression_cine'))
## SECOND DATASET TEST
c('impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on','impressions_em','impressions_sms','impressions_aff','impressions_sem')
## THIRD DATASET TEST
#c("catalogue_theme_2_indice_de_pression",
#  "catalogue_theme_3_indice_de_pression",
#  "catalogue_theme_4_indice_de_pression",
#  "radio_grp", "television_grp"
#  )
)
