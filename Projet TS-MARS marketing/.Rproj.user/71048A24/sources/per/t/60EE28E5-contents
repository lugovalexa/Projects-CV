---
title: "ts-mars-function"
author: "Elizaveta Golovanova, Alexandra Lugova, Joao Brum"
date: "2023-03-05"
output:
  html_document: default
  word_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

source("libraries.R")
source("function.R")
source("mars_choice.R")
source("best_model_results.R")
source("best_model_visualisation.R")
```

This document is prepared to make MARS model estimations and visualisations super easy. First, follow the instructions below to upload your data and make some preliminary transformations.

```{r, warning=FALSE, message=FALSE}
#### FIRST DATASET TEST

# Please, add your dataset here. 
#DataFrame <- read_excel('data_marketing.xlsx') %>% clean_names()

# Select the variables to explain your target variable
#variables <- c('x1', 'ventes_boisson_a_client', 'grp_presse','grp_tv','pression_cine', 'promotion_parfum_1_gratuit', 'promotion_parfum_2_prix', 'promotion_parfum_3_prix')

#DataFrame <- DataFrame %>% select(all_of(variables))

## Put here your target variable
#colnames(DataFrame)[colnames(DataFrame) == 'ventes_boisson_a_client'] <- 'TimeSeries'

## Instead of 'x1' put your date variable 
#colnames(DataFrame)[colnames(DataFrame) == 'x1'] <- 'Date'

# If needed, transform some variables in dummy
#DataFrame$promotion_parfum_1_gratuit_dummy <- ifelse(DataFrame$promotion_parfum_1_gratuit > 0, 1, 0)
#DataFrame$promotion_parfum_2_prix_dummy <- ifelse(DataFrame$promotion_parfum_2_prix > 0, 1, 0)
#DataFrame$promotion_parfum_3_prix_dummy <- ifelse(DataFrame$promotion_parfum_3_prix > 0, 1, 0)

#### SECOND DATASET TEST

#DataFrame <- read_csv('data_sales.csv') %>% clean_names()

# Select the variables to explain the sales
#variables <- c('week_start', 'sales', 'impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on',
#               'impressions_em','impressions_sms','impressions_aff','impressions_sem')
#DataFrame <- DataFrame %>% select(all_of(variables))

## Instead of 'x1' put your date variable 
#colnames(DataFrame)[colnames(DataFrame) == 'week_start'] <- 'Date'
#DataFrame$Date <- as.Date(DataFrame$Date, format = "%d.%m.%Y") # set format agrument according to your data

## Put here your series that you want to test on stationarity and check seasonal component
#colnames(DataFrame)[colnames(DataFrame) == 'sales'] <- 'TimeSeries'

#### THIRD DATASET TEST
# Please, add your dataset here. 
DataFrame <- read_excel('projet_data.xlsx') %>% clean_names()
# Select the variables to explain your target variable
DataFrame$Temp_diff = DataFrame$temperature_constatee - DataFrame$temperature_normale_de_saison

variables <- c('annee', 'semaine', 'temperature_constatee', 'temperature_normale_de_saison', 'affichage_indice_de_pression',
               'catalogue_theme_1_indice_de_pression')

DataFrame <- DataFrame %>% select(-c(variables, contains('sessions'), contains('concurrent')))
## Instead of 'x1' put your date variable 
colnames(DataFrame)[colnames(DataFrame) == 'date'] <- 'Date'
DataFrame$Date <- as.Date(DataFrame$Date, format = "%Y-%m-%d") # set format agrument according to your data
## Put here your series that you want to test on stationarity and check seasonal component
colnames(DataFrame)[colnames(DataFrame) == 'chiffre_daffaires_ht_k'] <- 'TimeSeries'
```

To obtain the best and correct MARS model visualisations we offer to refer on several tests that take into account possible distortion of results : 

1. Checking for missing data and any inconsistencies in the data. The NaN values will be dropped automatically, the mistakes check we offer you to do manually. The model is known to be resistant to outliers, however, if they are too strong, consider to drop them.  

2. Remove trend if it is stongly visible with an option to use the breaking points. We'll offer you to see on graphic the structural breaking points detected using the Perron test and deside if those points are relevant. If yes, data will be split and trend will be removed from each part. 

3. Remove seasonality if it is stongly visible. We'll offer you to see it on graphics first and deside if you want it to be removed. MARS model is resistant to slight seasonal fluctuations.

4. [Standartizing data](https://stats.stackexchange.com/questions/591269/is-data-scaling-necessary-in-mars-regression). We'll offer you to apply the standardisation to all continuous variables in order to obtain comparable coefficients. However, it will affect the visualisation, as the scales always will be in [0,1].

5. Autocorrelation test for lags in MARS model. When calculating the final model results we'll offer you to look at the ACF graphic to make your desicion about adding some extra lags.

6. Multicollinearity test. When calculating the final model results the message if there are highly correlated variables will appear. You'll see all variables for which VIF indicator is more than 10. We also calculated the condition indices. A condition number between 10 and 30 indicates the presence of multicollinearity and when a value is larger than 30, the multicollinearity is regarded as strong. We set the threshold = 30.

Here we offer you to do some graphical tests before transforming data.

Do you see a strong seasonality on this graphic? If yes, please use the following parameter `drop_seas = TRUE` in the function below.

```{r, warning=FALSE, echo=FALSE}
ggplot(DataFrame, aes(x = Date, y = TimeSeries)) +
  geom_line(color = "blue") +
  labs(x = "Date", y = "Value", title = "Time Series Data") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 9),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank()) +
  guides(color = 'None')
```

Do you see a breaking point on this graphic? If yes and you agree that there is a structural change at this point of time, please use the parameter `breaks` in the function below to indicate their number. 

If the graphic is not displayed, your data is stationary and there are no points of structural change. `breaks = 0` is set by default in the function below.

```{r, warning = FALSE, message=FALSE, echo=FALSE}
# Stationarity
## Augmented Dickeyâ€“Fuller (ADF) t-statistic test for unit root
if (adf.test(DataFrame$TimeSeries)$p.value > 0.05){
  ## Pettitt Test to detect a structural break
  pettittTest <- trend::pettitt.test(DataFrame$TimeSeries)
  if (pettittTest$p.value < 0.05) {
 # Add abline to the previous plot to show point of break
    ggplot(DataFrame, aes(x = Date, y = TimeSeries)) +
      geom_line(color = "blue") +
      geom_smooth(method = "loess", se = FALSE, color = "red") +
      labs(x = "Date", y = "Value", title = "Time Series Data and Trend with Structural Break Point") +
      theme_bw() +
      theme(plot.title = element_text(hjust = 0.5),
            axis.title = element_text(size = 12),
            axis.text = element_text(size = 9),
            panel.grid.minor = element_blank(),
            panel.border = element_blank(),
            panel.background = element_blank()) +
      guides(color = "None") +
      geom_vline(mapping = aes(xintercept = as.numeric(Date[pettittTest$estimate])),
                 linetype = 2,
                 colour = "red",
                 linewidth = 1)
  }
}
```

Write your parameters in the function `main`. 

Indicate if you want to clean your target variable from seasonality and/or add lags for it. If it's the case, please, indicate related variable in `related_var_season` from this list `c('seasonspring', 'seasonsummer', 'seasonfall', 'seasonwinter')`. By default, `related_var_season = seasonfall`. 

You can also choose whether you want to standardize variables in your dataset (Default `standardize = FALSE`).

You can use the parameter `break` if you observe some structural breaks on the graphic above.

We also add the adStock transformation if you want to take into account the saturation of your advertisement during the time. If you want to use it, add `adStock = TRUE` and the list variables `variables_ads = c()` that you want to transform. 

You can also add lags in your model, use the `LAG` parameter for it.

```{r, message=FALSE, warning=FALSE}
DataFrame_base_dat = main(DataFrame)
DataFrame_feature_dat = main(DataFrame, drop_seas = TRUE, related_var_season = 'seasonspring',
              adStock = TRUE, LAG = 2,
              variables_ads = 
                ## FIRST DATASET TEST
              #c('grp_presse', 'pression_cine'))
               ## SECOND DATASET TEST
              #c('impressions_dm','impressions_auddig','impressions_inst', 'impressions_audtr', 'impressions_vidtr', 'impressions_viddig', 'impressions_so', 'impressions_on','impressions_em','impressions_sms','impressions_aff','impressions_sem')
                 ## THIRD DATASET TEST
                c("catalogue_theme_2_indice_de_pression",
                  "catalogue_theme_3_indice_de_pression",
                  "catalogue_theme_4_indice_de_pression",
                  "radio_grp", "television_grp"
                  )
              )

DataFrame_base = DataFrame_base_dat %>% select(-Date)
DataFrame_feature = DataFrame_feature_dat %>% select(-Date)
```

If you want to compare models with different settings, use the function `mars_choice` below. You just need to insert a list of models. The `degree` parameter is always 2 since we are interested in looking at the synergy/anatagony of advertisement and `nprune` parameter (coefficient shrinkage) is tuned for each model automatically. 

Be careful when comparing models with and without standartization, use relative indicators like MAPE and R2. 

You can also change the window size for predictions for the best parameters tuning, by default, `window_size = 30`.

```{r, message=FALSE, warning=FALSE}
mars_choice(list(DataFrame_base, DataFrame_feature), window_size = 50)
```
Here you can see the results of your best model. Add generated dataset with best set of parameters to `best_model_results` function. Here you also can check the autocorrelation and multicollinearity test results. 

```{r, warning=FALSE}
DataFrame_feature = DataFrame_feature %>% select(-low_seasons)
best_model_dataset = DataFrame_feature
## If there is an error, check if all your variables have non zero values
results = best_model_results(best_model_dataset, window_size = 50)
```

Here you can visualize your results. Please, add a pair af variables that you want to visualise to test for a synergy effect. Sometimes there are no significant results in a model, thus, graphics can be not very informative. 

```{r, warning=FALSE}
best_model_visualisation(best_model_dataset, results, variables =
                           #c('grp_presse', 'pression_cine')
                           #c('impressions_vidtr', 'impressions_sem'),
                          c("radio_grp", "television_grp"))
```